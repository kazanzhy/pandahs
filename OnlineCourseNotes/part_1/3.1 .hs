module Demo where

----------------------------------------------------------------------------------------------------------------
addTwoElements :: a -> a -> [a] -> [a]
addTwoElements x y lst = x : y : lst
----------------------------------------------------------------------------------------------------------------
nTimes:: a -> Int -> [a]
nTimes = flip replicate
----------------------------------------------------------------------------------------------------------------
oddsOnly :: Integral a => [a] -> [a]
oddsOnly [] = []
oddsOnly (x:xs) = if odd x then x : oddsOnly xs else oddsOnly xs
----------------------------------------------------------------------------------------------------------------
isPalindrome :: Eq a => [a] -> Bool
isPalindrome x = x == reverse x
----------------------------------------------------------------------------------------------------------------
sum3 :: Num a => [a] -> [a] -> [a] -> [a]
sum3 [] [] [] = []
sum3 [] ys zs = sum3 [0] ys zs
sum3 xs [] zs = sum3 xs [0] zs
sum3 xs ys [] = sum3 xs ys [0]
sum3 (x:xs) (y:ys) (z:zs) = x+y+z : sum3 xs ys zs
----------------------------------------------------------------------------------------------------------------
groupElems :: Eq a => [a] -> [[a]]
groupElems [] = []
groupElems (x:xs) = [ x : (takeWhile (==x) xs) ] ++ (groupElems (dropWhile (==x) xs))
----------------------------------------------------------------------------------------------------------------

