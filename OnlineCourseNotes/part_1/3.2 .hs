module Demo where

----------------------------------------------------------------------------------------------------------------
import Data.Char
readDigits :: String -> (String, String)
readDigits xs = (takeWhile isDigit xs, dropWhile isDigit xs)
----------------------------------------------------------------------------------------------------------------
filterDisj :: (a -> Bool) -> (a -> Bool) -> [a] -> [a]
filterDisj f1 f2 xs = filter (\x -> f1 x || f2 x) xs
----------------------------------------------------------------------------------------------------------------
qsort :: Ord a => [a] -> [a]
qsort [] = []
qsort x = qsort (filter (< h) tl) ++ [h] ++ qsort (filter (>= h) tl) 
          where h = head x
                tl = tail x
----------------------------------------------------------------------------------------------------------------
squares'n'cubes :: Num a => [a] -> [a]
squares'n'cubes = concatMap (\x -> [x^2,x^3])
----------------------------------------------------------------------------------------------------------------
picks :: [t] -> [([t], t)]
picks [] = []
picks [x] = [([],x)]
picks (x:xs) = [(xs,x)] ++ [(x:ys,y) | (ys,y) <- picks xs]

perms :: [a] -> [[a]]
perms [] = [[]]
perms xs = [(x:zs) | (ys,x) <- picks xs, zs <- perms ys]  
----------------------------------------------------------------------------------------------------------------
import Data.Char
delAllUpper :: String -> String
delAllUpper = unwords . filter (any isLower) . words 
----------------------------------------------------------------------------------------------------------------
max3 :: Ord a => [a] -> [a] -> [a] -> [a]
max3 = zipWith3 (\x y z -> max x (max y z))
----------------------------------------------------------------------------------------------------------------

